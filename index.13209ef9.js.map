{"mappings":"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","sources":["src/actors/Actor.ts","src/utils/KeyboardMap.ts","src/actors/Canyon.ts","src/actors/FPSViewer.ts","src/actors/Barrier.ts","src/actors/Enemy.ts","src/state/GameManager.js","src/utils/CheckLimits.ts","src/script.ts"],"sourcesContent":["import { Point } from \"../types/Point\";\n\nexport interface IActor {\n\tposition?: Point;\n\tupdate: (delta: number,sizeCanvas:number,sizeCanvasHeight:number) => void;\n\tkeyboard_event_down?: (key: string, ctx: CanvasRenderingContext2D) => void;\n\tkeyboard_event_up?: (key: string) => void;\n\tdraw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n}\n\nexport class Actor implements IActor {\n\tposition: Point;\n\tconstructor(position: Point) {\n\t\tthis.position = position;\n\t}\n\tupdate(delta: number,sizeCanvas:number,sizeCanvasHeight:number) { }\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) { }\n\tkeyboard_event(key: string,ctx: CanvasRenderingContext2D) { }\n}","export enum CanyonKey {\n\tSPACE,\n\tLEFT,\n\tRIGHT,\n}\n\nexport interface KeyboardMap {\n\t[key: string]: CanyonKey;\n}\n\nexport let MoveCanyon = {\n\t\" \": CanyonKey.SPACE,\n\tArrowLeft: CanyonKey.LEFT,\n\tArrowRight: CanyonKey.RIGHT,\n\n};","import { Actor, IActor } from \"./Actor\";\nimport { Point } from \"../types/Point\";\n\nimport { checkLimits } from \"../utils/CheckLimits\";\nimport { CanyonKey, KeyboardMap } from \"../utils/KeyboardMap\";\nimport { convertToObject } from \"typescript\";\n//const ferrariImg = require(\"../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n\nlet canyonSpeed = 15;\n\nexport class Canyon extends Actor implements IActor {\n\tcanyonSize: Size;\n\tcanyonColor: string;\n\t\n\tcanyonSpeed: number;\n\t\n\tkeyboardMap: KeyboardMap;\n\tconstructor(\n\t\tinitialPos: Point,\n\t\tkeyboardMap: KeyboardMap,\n\t\tsize: Size = { w: 50, h: 50 },\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.keyboardMap = keyboardMap;\n\t\tthis.canyonSize = size;\n\t\tthis.canyonColor = \"white\";\n\t\n\t\tthis.canyonSpeed = canyonSpeed;\n\t\t\n\n\t\t// TODO: Canyon image\n\t\t// this.image = new Image();\n\t\t// this.image.src = ferrariImg;\n\t}\n\tupdate(delta: number,sizeCanvasWidth:number,sizeCanvasHeight:number) {\n\t\n\t\tif(this.position.x > sizeCanvasWidth-this.canyonSize.w){\n\t\t\t\tthis.position.x = sizeCanvasWidth-this.canyonSize.w;\t\n\t\t}\t\n\t\tif(this.position.x <= 0){\n\t\t\tthis.position.x = 5;\t\n\t}\t\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\n\t\tctx.fillStyle = this.canyonColor;\n\t\tctx.fillRect(this.position.x,this.position.y, this.canyonSize.w, this.canyonSize.h);\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\tkeyboard_event_down(key: string, ctx: CanvasRenderingContext2D) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == CanyonKey.LEFT) {\n\t\t\tthis.position.x -= this.canyonSpeed\n\t\t\t\n\t\t} else if (tecla == CanyonKey.RIGHT) {\n\t\t\t\n\t\t\t//this.canyonSpeed += 4;\n\t\t\tthis.position.x += this.canyonSpeed\n\t\t\t\n        } else if (tecla == CanyonKey.SPACE){\n\t\t \n\t\t\tthis.canyonSpeed = 0;\n\t\t\t//TODO: función disparo\n\n\t\t\tctx.beginPath();  \n\t\t\tctx.moveTo(this.position.x, this.position.y);    \n\t\t\tctx.lineTo(this.position.x, 900);  \n\t\t\tctx.strokeStyle = '#ff0000';\n      \t\tctx.stroke();\n\t\t\n\t\t\t\n\n\t\t}\n\t}\n\t// keyboard_event_up(key: string) {\n\t// \tlet tecla = this.keyboardMap[key];\n\t// \tif (tecla == Carkey.UP) {\n\t// \t\tthis.carAcceleration = 0;\n\t// \t} else if (tecla == Carkey.DOWN) {\n\t// \t\tthis.carAcceleration = 0;\n\t// \t}\n\t// }\n}","import { Actor } from \"./Actor\";\n\nexport class FPSViewer extends Actor {\n\tupdate() {}\n\tkeyboard_event() {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tconst fps = (1 / delta).toFixed(2);\n\t\tctx.font = \"15px Arial\";\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\n\t}\n}","import { Actor, IActor } from \"./Actor\";\nimport { Point } from \"../types/Point\";\n\nimport { checkLimits } from \"../utils/CheckLimits\";\nimport { CanyonKey, KeyboardMap } from \"../utils/KeyboardMap\";\nimport { convertToObject } from \"typescript\";\n//const ferrariImg = require(\"../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n\n\nexport class Barrier extends Actor implements IActor {\n\tbarrierSize: Size;\n\tbarrierColor: string;\n\tbarrierSpeed: number;\n\t\n\t\n\tconstructor(\n\t\tinitialPos: Point,\n\t\t\n\t\tsize: Size = { w: 105, h: 50 },\n\t) {\n\t\t\n\t\tsuper(initialPos);\n\t\t\n\t\tthis.barrierSize = size;\n\t\tthis.barrierColor = \"green\"\n\n\t\t// TODO: Barrier image\n\t\t// this.image = new Image();\n\t\t// this.image.src = ferrariImg;\n\t}\n\tupdate(delta: number,sizeCanvasWidth:number,sizeCanvasHeight:number) {\n\t\t\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\n\t\tctx.fillStyle = this.barrierColor;\n\t\tctx.fillRect(this.position.x,this.position.y, this.barrierSize.w, this.barrierSize.h);\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\n}","import { Actor, IActor } from \"./Actor\";\nimport { Point } from \"../types/Point\";\nimport { checkLimits } from \"../utils/CheckLimits\";\n//import { CanyonKey, KeyboardMap } from \"../utils/KeyboardMap\";\n\n//const ferrariImg = require(\"../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n// Aquí podemos cambiar la velocidad del enemigo.\nlet speedEnemy = 2;\n\n\nexport class Enemy extends Actor implements IActor {\n\tenemySize: Size;\n\tenemyColor: string;\n\t\n\tenemySpeed: number;\n\tdirection: number;\n\tconstructor(\n\t\tinitialPos: Point,\n\t\t\n\t\tsize: Size = { w: 50, h: 50 },\n\t) {\n\t\t\n\t\tsuper(initialPos);\n\t\tthis.enemySize = size;\n\t\tthis.enemyColor = \"red\";\n\t\tthis.direction= 1;\n\t\tthis.enemySpeed = speedEnemy*this.direction; \n\t\n\t\t// TODO: imagen enemy\n\t\t// this.image = new Image();\n\t\t// this.image.src = ferrariImg;\n\t}\n\tupdate(delta: number,sizeCanvasWidth:number,sizeCanvasHeight:number) {\n\t\t\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x + this.enemySpeed,\n\t\t\ty: this.position.y,\n\t\t};\n\t\t\n\t\tif (checkLimits(newPos,this.enemySize.w,sizeCanvasWidth,sizeCanvasHeight)) {\n\t\t\tthis.position = newPos;\t \n\t\t\t        \n\t\t}\n\t\tif(this.position.x >=sizeCanvasWidth-this.enemySize.w- this.enemySpeed || this.position.x <=1){\n\t\t\n\t\t\tthis.direction = this.position.x >=sizeCanvasWidth-this.enemySize.w-this.enemySpeed  ? -1 : 1\n\t\t\tthis.enemySpeed = speedEnemy*this.direction;\n\t\t\tthis.position.y+=50;\n\t\t\n\t\t\t//TODO: Aquí iría una game over si el enemigo llega a la altura de las barreras\n\t\t\t//TODO: Podría poner GAMER OVER, pulse ENTER para empezar\n\t\t\tif(this.position.y>=sizeCanvasHeight-300){\n\t\t\t\tconsole.log(\"Perdiste\")\n\t\t\t\tthis.position.x = 1\n\t\t\t\tthis.position.y = 40\n\n\t\t\t}\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\n\t\tctx.fillStyle = this.enemyColor;\n\t\tctx.fillRect(this.position.x,this.position.y, this.enemySize.w, this.enemySize.h);\n\n\t\t\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\n}","import { IActor } from \"../actors/Actor\";\nimport { Barrier } from \"../actors/Barrier\";\nimport { Enemy} from \"../actors/Enemy\"\n\n\nclass GameManager{\n  \n    constructor(actor){\n\n        let num = 5;\n        let size = 105;\n        let sep = 200;\n        let col= 5;\n        let row = 5;\n        let matrixEnemy = []\n        let barriers = []\n        for(let i=0; i<=num;i++ ){\n           \n            barriers.push(\n                new Barrier({x:1*i*size+sep*i, y:1024-250})\n            )\n            \n        }\n        this.barriers = barriers;\n      \n        for(let i=0;i<=col;i++){\n            matrixEnemy[i] = [];\n            for(let j=0;j<=row;j++)\n            {\n                    matrixEnemy[i][j]= new Enemy({x:i * 60 +1,y:j * 60 + 120});\n            }\n        }\n        this.matrixEnemy=matrixEnemy;\n        \n     \n    }\n   \n}\n\nexport let Game;\n\nexport const createGame = ()=>{\n    Game= new GameManager()\n}\n\n\n\n","import { Point } from \"../types/Point\";\nexport const checkLimits = (position: Point, size: number,sizeCanvasWidth: number, sizeCanvasHeight: number) => {\n\tif (\n\t\tposition.x < sizeCanvasWidth-size && //1020\n\t\tposition.x > 0 &&\n\t\tposition.y < sizeCanvasHeight &&\n\t\tposition.y > 0\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n};","import { Actor, IActor } from \"./actors/Actor\";\n\nimport {Canyon} from \"./actors/Canyon\"\nimport {Enemy} from \"./actors/Enemy\"\nimport { FPSViewer } from \"./actors/FPSViewer\";\nimport {Barrier} from \"./actors/Barrier\"\nimport { MoveCanyon } from \"./utils/KeyboardMap\";\n\nimport {Game,createGame } from \"./state/GameManager\"\n\nwindow.onload = () => {\n\tvar canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\tvar ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\t\n\tctx.fillStyle = \"gray\";\n\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\n\t\n\n\tlet fps = new FPSViewer({x: 5, y: 15 });\n\tlet canyon = new Canyon({ x: 30, y: 965},MoveCanyon); \n\t//let enemy = new Enemy({x:1,y:40})\n\n\t//TODO: Hacer las barreras decentemente 3 por lo menos\n\t//let barrier = new Barrier({x:30, y:canvas.height-250})\n\t\n\tcreateGame()\n\n\tlet enemyArray = [] \n\tGame.matrixEnemy.forEach(e => enemyArray = [ ...enemyArray, ...e])\n\tlet actors: Array<IActor> = [fps,canyon,...enemyArray,...Game.barriers];\n\t\n\tlet lastFrame = 0;\n\tconst render = (time: number) => {\n\t\tlet delta = (time - lastFrame) / 1000;\n\n\t\tlastFrame = time;\n\t\tactors.forEach((e) => e.update(delta,canvas.width,canvas.height));\n\t\t\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tctx.fillStyle = \"gray\";\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\t\tactors.forEach((e) => {\n\t\t\t//ctx.save();\n\t\t\te.draw(delta, ctx);\n\t\n\t\t\t//ctx.restore();\n\t\t});\n\t\twindow.requestAnimationFrame(render);\n\t};\n\n\twindow.requestAnimationFrame(render);\n\n\tdocument.body.addEventListener(\"keydown\", (e) => {\n\t\t\n\t\tactors.forEach((actor) => {\n\t\t\tif (actor.keyboard_event_down) {\n\t\t\t\tactor.keyboard_event_down(e.key,ctx);\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t});\n\t// document.body.addEventListener(\"keyup\", (e) => {\n\t// \t// console.log(e.key);\n\t// \tactors.forEach((actor) => {\n\t// \t\tif (actor.keyboard_event_up) {\n\t// \t\t\tactor.keyboard_event_up(e.key);\n\t// \t\t}\n\t// \t});\n\t// });\n};"],"names":["$8235678231353d24$export$f73d3eb6fd876d80","position","this","update","delta","sizeCanvas","sizeCanvasHeight","draw","delta1","ctx","keyboard_event","key","ctx1","CanyonKey","$abcda7ef8f1c398c$export$616b37de796fd680","$abcda7ef8f1c398c$export$ad0e2730ff0dc205","SPACE","ArrowLeft","LEFT","ArrowRight","RIGHT","$14165d7de5a795ee$export$5dab6e7cfd997c5","initialPos","keyboardMap","size","w","h","super","canyonSize","canyonColor","canyonSpeed","sizeCanvasWidth","x","fillStyle","fillRect","y","fill","stroke","keyboard_event_down","tecla","beginPath","moveTo","lineTo","strokeStyle","$37691bb6273e74a0$export$13acb86b4b3ca30e","fps","toFixed","font","fillText","$8b187f0cc2a29113$export$c1105631e00f9a4c","barrierSize","barrierColor","$8b3924e15ddbe876$export$985739bfa5723e08","$62aec6477a8e486e$export$eefe978c73a9a6","enemySize","enemyColor","direction","enemySpeed","newPos","$a5901cdfe966c2d4$export$b427d64c03133802","console","log","$8b3924e15ddbe876$var$GameManager","actor","matrixEnemy","barriers","i","push","i1","j","window","onload","canvas","document","getElementById","getContext","width","height","canyon","enemyArray","forEach","e","actors","lastFrame","render","time","clearRect","requestAnimationFrame","body","addEventListener"],"version":3,"file":"index.13209ef9.js.map"}