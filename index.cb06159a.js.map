{"mappings":"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","sources":["src/actors/Actor.ts","src/utils/KeyboardMap.ts","src/actors/Canyon.ts","src/actors/Enemy.ts","src/utils/CheckLimits.ts","src/actors/FPSViewer.ts","src/script.ts"],"sourcesContent":["import { Point } from \"../types/Point\";\n\nexport interface IActor {\n\tposition?: Point;\n\tupdate: (delta: number,sizeCanvas:number) => void;\n\tkeyboard_event_down?: (key: string, ctx: CanvasRenderingContext2D) => void;\n\tkeyboard_event_up?: (key: string) => void;\n\tdraw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n}\n\nexport class Actor implements IActor {\n\tposition: Point;\n\tconstructor(position: Point) {\n\t\tthis.position = position;\n\t}\n\tupdate(delta: number,sizeCanvas:number) { }\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) { }\n\tkeyboard_event(key: string,ctx: CanvasRenderingContext2D) { }\n}","export enum CanyonKey {\n\tSPACE,\n\tLEFT,\n\tRIGHT,\n}\n\nexport interface KeyboardMap {\n\t[key: string]: CanyonKey;\n}\n\nexport let MoveCanyon = {\n\t\" \": CanyonKey.SPACE,\n\tArrowLeft: CanyonKey.LEFT,\n\tArrowRight: CanyonKey.RIGHT,\n\n};","import { Actor, IActor } from \"./Actor\";\nimport { Point } from \"../types/Point\";\n\nimport { checkLimits } from \"../utils/CheckLimits\";\nimport { CanyonKey, KeyboardMap } from \"../utils/KeyboardMap\";\nimport { convertToObject } from \"typescript\";\n//const ferrariImg = require(\"../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n\nexport class Canyon extends Actor implements IActor {\n\tcanyonSize: Size;\n\tcanyonColor: string;\n\t//angle: number;\n\t// angleSpeed: number;\n\tcanyonSpeed: number;\n\t// carAcceleration: number;\n\t//image: HTMLImageElement;\n\tkeyboardMap: KeyboardMap;\n\tconstructor(\n\t\tinitialPos: Point,\n\t\tkeyboardMap: KeyboardMap,\n\t\tsize: Size = { w: 50, h: 50 },\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.keyboardMap = keyboardMap;\n\t\tthis.canyonSize = size;\n\t\tthis.canyonColor = \"green\";\n\t\n\t\tthis.canyonSpeed = 15;\n\t\t// this.canyonAcceleration = 0;\n\n\t\t// // Car image\n\t\t// this.image = new Image();\n\t\t// this.image.src = ferrariImg;\n\t}\n\tupdate(delta: number) {\n\t\t// let newPos: Point = {\n\t\t// \tx: this.position.x + this.canyonSpeed,\n\t\t// \ty: this.position.y,\n\t\t// };\n\t\t// if (checkLimits(newPos)) {\n\t\t// \tthis.position = newPos;\t\n\t\t// }\t\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\n\t\tctx.fillStyle = this.canyonColor;\n\t\tctx.fillRect(this.position.x,this.position.y, this.canyonSize.w, this.canyonSize.h);\n\n\t\t//ctx.translate(this.position.x, this.position.y);\n\t\t//ctx.drawImage(this.image, -50, -25, 100, 50);\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\tkeyboard_event_down(key: string, ctx: CanvasRenderingContext2D) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == CanyonKey.LEFT) {\n\t\t\tthis.position.x -= this.canyonSpeed\n\t\t\t\n\t\t} else if (tecla == CanyonKey.RIGHT) {\n\t\t\t\n\t\t\t//this.canyonSpeed += 4;\n\t\t\tthis.position.x += this.canyonSpeed\n\t\t\t\n        } else if (tecla == CanyonKey.SPACE){\n\t\t\tconsole.log(tecla,CanyonKey.SPACE)\n\t\t\tthis.canyonSpeed = 0;\n\t\t\t//TODO: función disparo\n\n\t\t\tctx.beginPath();  \n\t\t\tctx.moveTo(this.position.x, this.position.y);    \n\t\t\tctx.lineTo(this.position.x, 900);  \n\t\t\tctx.strokeStyle = '#ff0000';\n      \t\tctx.stroke();\n\t\t\n\t\t\t\n\n\t\t}\n\t}\n\t// keyboard_event_up(key: string) {\n\t// \tlet tecla = this.keyboardMap[key];\n\t// \tif (tecla == Carkey.UP) {\n\t// \t\tthis.carAcceleration = 0;\n\t// \t} else if (tecla == Carkey.DOWN) {\n\t// \t\tthis.carAcceleration = 0;\n\t// \t}\n\t// }\n}","import { Actor, IActor } from \"./Actor\";\nimport { Point } from \"../types/Point\";\n\nimport { checkLimits } from \"../utils/CheckLimits\";\n//import { CanyonKey, KeyboardMap } from \"../utils/KeyboardMap\";\nimport { convertToObject } from \"typescript\";\n\n//const ferrariImg = require(\"../assets/ferrari.png\");\n\ntype Size = { w: number; h: number };\n// Aquí podemos cambiar la velocidad del enemigo.\nlet speedEnemy = 6;\n\nexport class Enemy extends Actor implements IActor {\n\tenemySize: Size;\n\tenemyColor: string;\n\t\n\tenemySpeed: number;\n\tdirection: number;\n\tconstructor(\n\t\tinitialPos: Point,\n\t\t\n\t\tsize: Size = { w: 50, h: 50 },\n\t) {\n\t\t\n\t\tsuper(initialPos);\n\t\tthis.enemySize = size;\n\t\tthis.enemyColor = \"red\";\n\t\tthis.direction= 1;\n\t\tthis.enemySpeed = speedEnemy*this.direction; \n\t\t// // Car image\n\t\t// this.image = new Image();\n\t\t// this.image.src = ferrariImg;\n\t}\n\tupdate(delta: number,sizeCanvas:number) {\n\t\t\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x + this.enemySpeed,\n\t\t\ty: this.position.y,\n\t\t};\n\t\t\n\t\tif (checkLimits(newPos,this.enemySize.w,sizeCanvas)) {\n\t\t\tthis.position = newPos;\t \n\t\t\t        \n\t\t}\n\t\tif(this.position.x >=sizeCanvas-this.enemySize.w- this.enemySpeed || this.position.x <=1){\n\t\t\n\t\t\tthis.direction = this.position.x >=sizeCanvas-this.enemySize.w-this.enemySpeed  ? -1 : 1\n\t\t\tthis.enemySpeed = speedEnemy*this.direction;\n\t\t\tthis.position.y+=50;\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\n\t\tctx.fillStyle = this.enemyColor;\n\t\tctx.fillRect(this.position.x,this.position.y, this.enemySize.w, this.enemySize.h);\n\n\t\t\n\t\tctx.fill();\n\t\tctx.stroke();\n\t}\n\n}","import { Point } from \"../types/Point\";\nexport const checkLimits = (position: Point,size :number,sizeCanvas:number) => {\n\tif (\n\t\tposition.x < sizeCanvas-size && //1020\n\t\tposition.x > 0 &&\n\t\tposition.y < 1024 &&\n\t\tposition.y > 0\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n};","import { Actor } from \"./Actor\";\n\nexport class FPSViewer extends Actor {\n\tupdate() {}\n\tkeyboard_event() {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tconst fps = (1 / delta).toFixed(2);\n\t\tctx.font = \"15px Arial\";\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\n\t}\n}","import { Actor, IActor } from \"./actors/Actor\";\n\nimport {Canyon} from \"./actors/Canyon\"\nimport {Enemy} from \"./actors/Enemy\"\nimport { FPSViewer } from \"./actors/FPSViewer\";\nimport { MoveCanyon } from \"./utils/KeyboardMap\";\n\n\nwindow.onload = () => {\n\tvar canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\tvar ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\t\n\tctx.fillStyle = \"gray\";\n\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\tlet sizeCanvas = canvas.width\n\n\tlet fps = new FPSViewer({x: 5, y: 15 });\n\tlet canyon = new Canyon({ x: 30, y: 965},MoveCanyon); \n\tlet enemy = new Enemy({x:1,y:40})\n\t\n\tlet actors: Array<IActor> = [fps,canyon,enemy];\n\n\tlet lastFrame = 0;\n\tconst render = (time: number) => {\n\t\tlet delta = (time - lastFrame) / 1000;\n\n\t\tlastFrame = time;\n\t\tactors.forEach((e) => e.update(delta,sizeCanvas));\n\t\t\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tctx.fillStyle = \"gray\";\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\t\tactors.forEach((e) => {\n\t\t\t//ctx.save();\n\t\t\te.draw(delta, ctx);\n\t\n\t\t\t//ctx.restore();\n\t\t});\n\t\twindow.requestAnimationFrame(render);\n\t};\n\n\twindow.requestAnimationFrame(render);\n\n\tdocument.body.addEventListener(\"keydown\", (e) => {\n\t\t\n\t\tactors.forEach((actor) => {\n\t\t\tif (actor.keyboard_event_down) {\n\t\t\t\tactor.keyboard_event_down(e.key,ctx);\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t});\n\t// document.body.addEventListener(\"keyup\", (e) => {\n\t// \t// console.log(e.key);\n\t// \tactors.forEach((actor) => {\n\t// \t\tif (actor.keyboard_event_up) {\n\t// \t\t\tactor.keyboard_event_up(e.key);\n\t// \t\t}\n\t// \t});\n\t// });\n};"],"names":["$8235678231353d24$export$f73d3eb6fd876d80","position","this","update","delta","sizeCanvas","draw","delta1","ctx","keyboard_event","key","ctx1","CanyonKey","$abcda7ef8f1c398c$export$616b37de796fd680","$abcda7ef8f1c398c$export$ad0e2730ff0dc205","SPACE","ArrowLeft","LEFT","ArrowRight","RIGHT","$14165d7de5a795ee$export$5dab6e7cfd997c5","initialPos","keyboardMap","size","w","h","super","canyonSize","canyonColor","canyonSpeed","fillStyle","fillRect","x","y","fill","stroke","keyboard_event_down","tecla","console","log","beginPath","moveTo","lineTo","strokeStyle","$62aec6477a8e486e$export$eefe978c73a9a6","enemySize","enemyColor","direction","enemySpeed","newPos","$a5901cdfe966c2d4$export$b427d64c03133802","$37691bb6273e74a0$export$13acb86b4b3ca30e","fps","toFixed","font","fillText","window","onload","canvas","document","getElementById","getContext","width","height","actors","lastFrame","render","time","forEach","e","clearRect","requestAnimationFrame","body","addEventListener","actor"],"version":3,"file":"index.cb06159a.js.map"}